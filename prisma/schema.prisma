generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id         String  @id @default(auto()) @map("_id") @db.ObjectId
    username   String  @unique
    email      String  @unique
    password   String
    isVerified Boolean @default(false)
    role       Role    @default(customer)

    hizmetAlan  HizmetAlan?
    hizmetVeren HizmetVeren?

    VerificationCode VerificationCode?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

model HizmetAlan {
    id                   String     @id @default(auto()) @map("_id") @db.ObjectId
    name                 String
    surname              String
    onlineStatus         Boolean
    totalAppointments    Int
    appointmentIntervals DateTime[]
    comments             Comment[]

    phone  String
    userId String? @unique @db.ObjectId
    user   User?   @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // Date      Date[]
}

model HizmetVeren {
    id                   String          @id @default(auto()) @map("_id") @db.ObjectId
    name                 String
    surname              String
    onlineStatus         Boolean
    jobStatus            String
    languages            String[]
    price                Int
    totalAppointments    Int
    appointmentIntervals DateTime[]
    resume               String
    educationInfo        EducationInfo[]
    serviceAreas         String[]
    comments             Comment[]
    certificates         Certificate[]

    phone     String
    userId    String?  @unique @db.ObjectId
    user      User?    @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // Date      Date[]
}

model EducationInfo {
    id            String       @id @default(auto()) @map("_id") @db.ObjectId
    university    String
    year          String
    profileId     String
    HizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])
    hizmetVerenId String?      @db.ObjectId
}

model Certificate {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    certificate String
    year        String

    HizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])
    hizmetVerenId String?      @db.ObjectId
}

model Comment {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    text  String
    stars Int

    profileId String
    profile   HizmetAlan @relation(fields: [profileId], references: [id])

    HizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])
    hizmetVerenId String?      @db.ObjectId
}

model VerificationCode {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    code           String   @unique
    expirationTime DateTime
    userId         String?  @unique @db.ObjectId
    user           User?    @relation(fields: [userId], references: [id])
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
}

enum Role {
    customer
    admin
    partner
}

model Date {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    confirm       Boolean @default(false)
    date_of_birth String?
    delete        Boolean @default(false)
    duration      Int
    service       String
    notes         String
    language      String
    kim_icin      String
    gender        String?
    firstName     String?
    lastName      String?
    time          String?

    // hizmetAlanId String?     @unique @db.ObjectId
    // hizmetAlan   HizmetAlan? @relation(fields: [hizmetAlanId], references: [id])

    // hizmetVerenId String?      @unique @db.ObjectId
    // hizmetVeren   HizmetVeren? @relation(fields: [hizmetVerenId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model SelectedTimes {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    active   Boolean @default(true)
    duration Int
    date     String
    time     String
}

model SavedTimes {
    id   String   @id @default(auto()) @map("_id") @db.ObjectId
    time String
}

model Adverts {
    id                  String  @id @default(auto()) @map("_id") @db.ObjectId
    baslangicTarihi     String
    bitisTarihi         String
    butceTipi           String
    gunlukButceMiktari  Int
    reklamAdi           String
    reklamTarihi        String
    reklamTipi          String
}